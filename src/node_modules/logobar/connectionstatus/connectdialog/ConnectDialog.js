import React from 'react';
import { connect } from 'react-redux';
import cx from 'classnames';
import { withFormik, Form, Field } from 'formik';
import * as yup from 'yup';

import { cancelConnectDialog } from "logobar/connectionstatus/connectdialog/actions";
import { connectToHome } from "home/actions";

const Input = ({name, title}) => (
    <div className="form-group">
        <label htmlFor={name}>{title}</label>
        <Field name={name} render={({field, form}) => {
            const touched = form.touched[field.name];
            const error = form.errors[field.name];
            return (
                <>
                    <input {...field} id={name} type={name !== "password" ? "text" : "password"}
                           className={cx([
                               "form-control", {
                                   "is-valid": touched && !error,
                                   "is-invalid": touched && error,
                               }])}/>
                    {touched && error && <div className="invalid-feedback">{error}</div>}
                </>
            );
        }} />
    </div>
);

class ConnectDialog extends React.Component {

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.props.show !== prevProps.show && this.props.show) {
            this.props.resetForm();
        }
    }

    render() {
        const {show, cancelConnectDialog} = this.props;

        if (!show) {
            return null;
        }

        return (
            <Form>
                <div className="modal-backdrop show" />
                <div className="modal show" style={{display: "block"}} onClick={cancelConnectDialog}>
                    <div className="modal-dialog modal-dialog-centered" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-content">
                            <div className="modal-header">
                                <h4 className="modal-title">Connect to home</h4>
                                <button type="button" className="close" onClick={cancelConnectDialog}>&times;</button>
                            </div>
                            <div className="modal-body">
                                <Input name="location" title="Node URL" />
                                <Input name="login" title="Login" />
                                <Input name="password" title="Password" />
                            </div>
                            <div className="modal-footer">
                                <button type="button" className="btn btn-secondary" onClick={cancelConnectDialog}>
                                    Cancel
                                </button>
                                <button type="submit" className="btn btn-primary">
                                    Connect
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </Form>
        );
    }

}

const connectDialogLogic = {

    mapPropsToValues(props) {
        return {
            location: props.location,
            login: props.login,
            password: ""
        }
    },

    validationSchema: yup.object().shape({
        location: yup.string().url("Must be a valid URL").required("Must not be empty"),
        login: yup.string().required("Must not be empty"),
        password: yup.string().required("Must not be empty")
    }),

    handleSubmit(values, formik) {
        formik.props.connectToHome(values.location, values.login, values.password);
        formik.setSubmitting(false);
    }

};

export default connect(
    (state) => state.connectDialog,
    { cancelConnectDialog, connectToHome }
)(withFormik(connectDialogLogic)(ConnectDialog));

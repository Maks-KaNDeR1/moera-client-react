import React from 'react';
import { connect } from 'react-redux';
import cx from 'classnames';
import { Field, Form, withFormik } from 'formik';
import * as yup from 'yup';

import { Button, ModalDialog } from "control";
import { cancelConnectDialog } from "logobar/connectionstatus/connectdialog/actions";
import { connectToHome } from "home/actions";

class Input extends React.PureComponent {

    constructor(props) {
        super(props);
        this.inputDom = null;
    }

    componentDidMount() {
        if (this.props.autoFocus && this.inputDom) {
            this.inputDom.focus();
        }
    }

    render() {
        const {name, title} = this.props;

        return (
            <div className="form-group">
                <label htmlFor={name}>{title}</label>
                <Field name={name} render={({field, form}) => {
                    const touched = form.touched[field.name];
                    const error = form.errors[field.name];
                    return (
                        <>
                            <input
                                {...field}
                                id={name}
                                type={name !== "password" ? "text" : "password"}
                                className={cx([
                                    "form-control", {
                                        "is-valid": touched && !error,
                                        "is-invalid": touched && error,
                                    }])}
                                ref={(dom) => {this.inputDom = dom}}
                            />
                            {touched && error && <div className="invalid-feedback">{error}</div>}
                        </>
                    );
                }} />
            </div>
        );
    }

}

class ConnectDialog extends React.Component {

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.props.show !== prevProps.show && this.props.show) {
            this.props.resetForm();
        }
    }

    render() {
        const {show, cancelConnectDialog} = this.props;

        if (!show) {
            return null;
        }

        return (
            <ModalDialog title="Connect to home" onClose={cancelConnectDialog}>
                <Form>
                    <div className="modal-body">
                        <Input name="location" title="Node URL" autoFocus />
                        <Input name="login" title="Login" />
                        <Input name="password" title="Password" />
                    </div>
                    <div className="modal-footer">
                        <Button variant="secondary" onClick={cancelConnectDialog}>Cancel</Button>
                        <Button variant="primary" type="submit">Connect</Button>
                    </div>
                </Form>
            </ModalDialog>
        );
    }

}

const connectDialogLogic = {

    mapPropsToValues(props) {
        return {
            location: props.location,
            login: props.login,
            password: ""
        }
    },

    validationSchema: yup.object().shape({
        location: yup.string().url("Must be a valid URL").required("Must not be empty"),
        login: yup.string().required("Must not be empty"),
        password: yup.string().required("Must not be empty")
    }),

    handleSubmit(values, formik) {
        formik.props.connectToHome(values.location, values.login, values.password);
        formik.setSubmitting(false);
    }

};

export default connect(
    (state) => state.connectDialog,
    { cancelConnectDialog, connectToHome }
)(withFormik(connectDialogLogic)(ConnectDialog));

import schm from 'schm';
import { select, call, apply } from 'redux-saga/effects';

import { formatSchemaErrors, NodeApiError, NodeError } from "error";
import * as NodeApi from "node/api";

function isErrorCodeAllowed(errorCode, filter) {
    if (typeof filter === "boolean") {
        return filter;
    }
    if (Array.isArray(filter)) {
        return filter.includes(errorCode);
    }
    if (typeof filter === "function") {
        return filter(errorCode);
    }
    return false;
}

export function* callApi({
            location,
            rootApiSelector,
            method = "GET",
            body = null,
            schema = null,
            errorTitle = "",
            errorFilter = false
        }) {
    const rootApi = typeof rootApiSelector === "string" ? rootApiSelector : (yield select(rootApiSelector));
    let response;
    try {
        response = yield call(fetch, rootApi + location, {
            method,
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: body != null ? JSON.stringify(body) : null
        });
    } catch (e) {
        throw new NodeError(errorTitle, e);
    }
    let data;
    try {
        data = yield apply(response, response.json);
    } catch (e) {
        if (!response.ok) {
            throw new NodeError(errorTitle, "Server returned error status");
        } else {
            if (schema) {
                throw new NodeError(errorTitle, "Server returned empty result");
            } else {
                return {};
            }
        }
    }
    if (!response.ok) {
        let result;
        try {
            result = yield call(schm.validate, data, NodeApi.Result);
        } catch (e) {
            throw new NodeError(errorTitle, "Server returned error status");
        }
        if (isErrorCodeAllowed(result.errorCode, errorFilter)) {
            throw new NodeApiError(result.errorCode, result.message);
        } else {
            throw new NodeError(errorTitle, "Server returned error status");
        }
    }
    if (!schema) {
        return data;
    }
    try {
        return yield call(schm.validate, data, schema);
    } catch (errors) {
        throw new NodeError(errorTitle,
            location + " returned incorrect response: " + formatSchemaErrors(errors));
    }
}

function* callNode(options) {
    return yield call(callApi, {
        ...options,
        rootApiSelector: state => state.node.root.api,
        errorTitle: "Node access error"
    });
}

export function* getWhoAmI() {
    return yield call(callNode, {location: "/whoami", schema: NodeApi.WhoAmI});
}

export function* getProfile() {
    return yield call(callNode, {location: "/profile", schema: NodeApi.ProfileInfo});
}

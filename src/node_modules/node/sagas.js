import schm from 'schm';
import { select, call, apply } from 'redux-saga/effects';

import { NodeError } from "error";
import * as NodeApi from "node/api";

export function* callApi({
            location,
            rootApiSelector,
            method = "GET",
            body = null,
            schema = null,
            errorTitle = ""
        }) {
    const rootApi = typeof rootApiSelector === "string" ? rootApiSelector : (yield select(rootApiSelector));
    let response;
    try {
        response = yield call(fetch, rootApi + location, {
            method,
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: body != null ? JSON.stringify(body) : null
        });
    } catch (e) {
        throw new NodeError(errorTitle, e);
    }
    if (!response.ok) {
        throw new NodeError(errorTitle, "Server returned error status");
    }
    const data = yield apply(response, response.json);
    if (!schema) {
        return data;
    }
    try {
        return yield call(schm.validate, data, schema);
    } catch (errors) {
        const desc = errors.map(({message}) => message).join(", ");
        throw new NodeError(errorTitle, location + " returned incorrect response: " + desc);
    }
}

function* callNode(options) {
    return yield call(callApi, {
        ...options,
        rootApiSelector: state => state.node.root.api,
        errorTitle: "Node access error"
    });
}

export function* getWhoAmI() {
    return yield call(callNode, {location: "/whoami", schema: NodeApi.WhoAmI});
}

export function* getProfile() {
    return yield call(callNode, {location: "/profile", schema: NodeApi.ProfileInfo});
}

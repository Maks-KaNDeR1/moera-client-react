import { apply, call, select } from 'redux-saga/effects';

import { formatSchemaErrors, NodeApi, NodeApiError, NodeError } from "api";
import { getHomeToken } from "state/home/selectors";

function isErrorCodeAllowed(errorCode, filter) {
    if (typeof filter === "boolean") {
        return filter;
    }
    if (Array.isArray(filter)) {
        return filter.includes(errorCode);
    }
    if (typeof filter === "function") {
        return filter(errorCode);
    }
    return false;
}

export function* callApi({
            location,
            rootApiSelector,
            method = "GET",
            body = null,
            schema = null,
            errorTitle = "",
            errorFilter = false
        }) {
    const rootApi = typeof rootApiSelector === "string" ? rootApiSelector : (yield select(rootApiSelector));
    const exception = (e, details) => new NodeError(method, rootApi, location, errorTitle, e, details);
    let response;
    try {
        response = yield call(fetch, rootApi + location, {
            method,
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: body != null ? JSON.stringify(body) : null
        });
    } catch (e) {
        throw exception(e);
    }
    let data;
    try {
        data = yield apply(response, response.json);
    } catch (e) {
        if (!response.ok) {
            throw exception("Server returned error status");
        } else {
            if (schema) {
                throw exception("Server returned empty result");
            } else {
                return {};
            }
        }
    }
    if (!response.ok) {
        if (!NodeApi.Result(data)) {
            throw exception("Server returned error status");
        }
        if (isErrorCodeAllowed(data.errorCode, errorFilter)) {
            throw new NodeApiError(data.errorCode, data.message);
        } else {
            throw exception("Server returned error status");
        }
    }
    if (schema && !schema(data)) {
        throw exception("Server returned incorrect response", formatSchemaErrors(schema.errors));
    }
    return data;
}

function* callNode(options) {
    return yield call(callApi, {
        ...options,
        rootApiSelector: state => state.node.root.api,
        errorTitle: "Node access error"
    });
}

function* authorized(location) {
    const token = yield select(getHomeToken);
    return token ? location + "?token=" + encodeURIComponent(token) : location;
}

export function* getWhoAmI() {
    return yield call(callNode, {location: "/whoami", schema: NodeApi.WhoAmI});
}

export function* getProfile() {
    const location = yield call(authorized, "/profile");
    return yield call(callNode, {location, schema: NodeApi.ProfileInfo});
}

export function* putProfile(profile) {
    const location = yield call(authorized, "/profile");
    return yield call(callNode, {location, method: "PUT", body: profile, schema: NodeApi.ProfileInfo});
}

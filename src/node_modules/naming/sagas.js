import { select, call, apply } from 'redux-saga/effects';

import { formatSchemaErrors, NamingError } from "error";
import * as NamingApi from "naming/api";
import schm from "schm";

let callId = 1;

function* callNaming({method, params, schema = null, notNull = false}) {
    const exception = (e, details = null) => new NamingError(method, e, details);
    const location = yield select(state => state.naming.location);
    let response;
    try {
        response = yield call(fetch, location, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                jsonrpc: "2.0",
                id: callId++,
                method,
                params
            })
        });
    } catch (e) {
        throw exception(e);
    }
    if (!response.ok) {
        throw exception("Server returned error status");
    }
    let data;
    try {
        data = yield apply(response, response.json);
    } catch (e) {
        throw exception("Server returned empty result");
    }
    if (response.error) {
        let result;
        try {
            result = yield call(schm.validate, data, NamingApi.ErrorResult);
        } catch (errors) {
            throw exception("Error response format incorrect", formatSchemaErrors(errors));
        }
        throw exception(result.error.message);
    }
    let result;
    try {
        result = yield call(schm.validate, data, NamingApi.Result);
    } catch (errors) {
        throw exception("Response format incorrect", formatSchemaErrors(errors));
    }
    if (result.result == null) {
        if (!notNull) {
            return null;
        } else {
            throw exception("Return value is null");
        }
    }
    if (!schema) {
        return result.result;
    }
    let returnValue;
    try {
        returnValue = yield call(schm.validate, result.result, schema);
    } catch (errors) {
        throw exception("Return value format incorrect: ", formatSchemaErrors(errors));
    }
    return returnValue;
}

export function* getCurrent(name, generation) {
    return yield call(callNaming,
        {method: "getCurrent", params: [name, generation], schema: NamingApi.RegisteredNameInfo});
}

import { call, put, select } from 'redux-saga/effects';

import { messageBox } from "state/messagebox/actions";
import { normalizeUrl } from "util/util";
import { connectedToHome, connectionToHomeFailed, homeOwnerSet, homeOwnerVerified } from "state/home/actions";
import { openConnectDialog } from "state/connectdialog/actions";
import { Browser, Home, Naming, Node, NodeApi, NodeApiError, RegisteredName } from "api";
import { errorThrown } from "state/error/actions";

function* connectToHomeFailure(error, onClose = null) {
    yield put(connectionToHomeFailed());
    yield put(messageBox("Connection to home failed: " + error.message, onClose));
}

export function* connectToHomeSaga(action) {
    const {location, assign, login, password} = action.payload;
    Browser.storeHomeData(location, login, null, null);
    const rootApi = normalizeUrl(location) + "/moera/api";
    let data;
    try {
        if (assign) {
            yield call(Node.callApi, {
                location: "/credentials",
                rootApiSelector: rootApi,
                method: "POST",
                body: {
                    login,
                    password
                },
                schema: NodeApi.Result,
                errorFilter: ["credentials.already-created"]
            });
        }
        data = yield call(Node.callApi, {
            location: "/tokens",
            rootApiSelector: rootApi,
            method: "POST",
            body: {
                login,
                password
            },
            schema: NodeApi.TokenCreated,
            errorFilter: ["credentials.login-incorrect", "credentials.not-created"]
        });
    } catch (e) {
        if (e instanceof NodeApiError) {
            yield call(connectToHomeFailure, e, openConnectDialog());
        } else {
            yield call(connectToHomeFailure, e);
        }
        return;
    }
    Browser.storeHomeData(normalizeUrl(location), login, data.token, data.permissions);
    yield put(connectedToHome(normalizeUrl(location), login, data.token, data.permissions));
}

export function* verifyHomeOwnerSaga() {
    try {
        const data = yield call(Home.getWhoAmI);
        yield put(homeOwnerSet(data.registeredName));
        const {name, generation} = RegisteredName.parse(data.registeredName);
        if (name == null || generation == null) {
            return;
        }
        const ndata = yield call(Naming.getCurrent, name, generation);
        const rootPage = yield select(state => state.home.root.page);
        const correct = ndata && normalizeUrl(ndata.nodeUri) === rootPage;
        const latest = ndata && ndata.latest;
        yield put(homeOwnerVerified(data.registeredName, latest, correct));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

import immutable from 'object-path-immutable';

import {
    SETTINGS_NODE_META_LOAD,
    SETTINGS_NODE_META_LOAD_FAILED,
    SETTINGS_NODE_META_LOADED,
    SETTINGS_NODE_VALUES_LOAD,
    SETTINGS_NODE_VALUES_LOAD_FAILED,
    SETTINGS_NODE_VALUES_LOADED,
    SETTINGS_UPDATE_SUCCEEDED
} from "state/settings/actions";

const initialState = {
    tab: "node",
    node: {
        loadingValues: false,
        loadedValues: false,
        values: new Map(),
        loadingMeta: false,
        loadedMeta: false,
        meta: new Map()
    }
};

export default (state = initialState, action) => {
    switch (action.type) {
        case SETTINGS_NODE_VALUES_LOAD:
            return immutable(state).set("node.loadingValues", true).value();

        case SETTINGS_NODE_VALUES_LOADED: {
            let values = new Map();
            action.payload.settings.forEach(({name, value}) => values.set(name, value));
            return immutable(state)
                .set("node.loadingValues", false)
                .set("node.loadedValues", true)
                .set("node.values", values)
                .value();
        }

        case SETTINGS_NODE_VALUES_LOAD_FAILED:
            return immutable(state).set("node.loadingMeta", false).value();

        case SETTINGS_NODE_META_LOAD:
            return immutable(state).set("node.loadingMeta", true).value();

        case SETTINGS_NODE_META_LOADED: {
            let metadata = new Map();
            action.payload.meta.forEach(meta => metadata.set(meta.name, meta));
            return immutable(state)
                .set("node.loadingMeta", false)
                .set("node.loadedMeta", true)
                .set("node.meta", metadata)
                .value();
        }

        case SETTINGS_NODE_META_LOAD_FAILED:
            return immutable(state).set("node.loadingMeta", false).value();

        case SETTINGS_UPDATE_SUCCEEDED:
            let values = new Map(state.node.values);
            action.payload.settings.forEach(({name, value}) => values.set(name, value));
            const result = immutable.set(state, "node.values", values);
            console.log(result);
            return result;

        default:
            return state;
    }
}

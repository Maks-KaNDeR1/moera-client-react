import immutable from 'object-path-immutable';

import {
    CLOSE_REACTIONS_DIALOG,
    OPEN_REACTIONS_DIALOG,
    REACTIONS_DIALOG_PAST_REACTIONS_LOAD,
    REACTIONS_DIALOG_PAST_REACTIONS_LOAD_FAILED,
    REACTIONS_DIALOG_PAST_REACTIONS_LOADED,
    REACTIONS_DIALOG_UNSET
} from "state/reactionsdialog/actions";

const initialState = {
    show: false,
    postingId: null,
    negative: false,
    reactions: {
        loading: false,
        total: 0,
        after: Number.MAX_SAFE_INTEGER,
        items: []
    },
    totals: {
        loading: false,
        loaded: false,
        total: 0,
        emojis: []
    }
};

export default (state = initialState, action) => {
    switch (action.type) {
        case OPEN_REACTIONS_DIALOG:
            if (state.postingId === action.payload.postingId && state.negative === action.payload.negative) {
                return {
                    ...state,
                    show: true
                }
            }
            return {
                ...initialState,
                show: true,
                postingId: action.payload.postingId,
                negative: action.payload.negative
            };

        case CLOSE_REACTIONS_DIALOG:
            return {
                ...state,
                show: false
            };

        case REACTIONS_DIALOG_PAST_REACTIONS_LOAD:
            return immutable.set(state, "reactions.loading", true);

        case REACTIONS_DIALOG_PAST_REACTIONS_LOADED:
            if (action.payload.postingId !== state.postingId || action.payload.negative !== state.negative) {
                return state;
            }
            if (action.payload.before >= state.reactions.after && action.payload.after < state.reactions.after) {
                let reactions = state.reactions.items.slice();
                action.payload.reactions
                    .filter(p => p.moment <= state.reactions.after)
                    .forEach(p => reactions.push(p));
                reactions.sort((a, b) => b.moment - a.moment);
                return immutable(state)
                    .set("reactions.loading", false)
                    .set("reactions.total", action.payload.total)
                    .set("reactions.after", action.payload.after)
                    .set("reactions.items", reactions)
                    .value();
            } else {
                return immutable.set(state, "reactions.loading", false);
            }

        case REACTIONS_DIALOG_PAST_REACTIONS_LOAD_FAILED:
            return immutable.set(state, "reactions.loading", false);

        case REACTIONS_DIALOG_UNSET:
            return {
                ...initialState
            };

        default:
            return state;
    }
}

import { call, put, select } from 'redux-saga/effects';

import { normalizeUrl } from "util/util";
import { errorThrown } from "state/error/actions";
import { Naming, Node, RegisteredName } from "api";
import { ownerSet, ownerVerified } from "state/owner/actions";

export function* ownerLoadSaga() {
    try {
        const data = yield call(Node.getWhoAmI);
        yield put(ownerSet(data.registeredName));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

export function* ownerVerifySaga() {
    const {rootPage, ownerName} = yield select(state => ({
        rootPage: state.node.root.page,
        ownerName: state.owner.name
    }));
    try {
        const {name, generation} = RegisteredName.parse(ownerName);
        const data = yield call(Naming.getCurrent, name, generation);
        const correct = !!(data && rootPage === normalizeUrl(data.nodeUri));
        const latest = !!(data && data.latest);
        const deadline = data ? data.deadline : null;
        yield put(ownerVerified(ownerName, latest, correct, deadline));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

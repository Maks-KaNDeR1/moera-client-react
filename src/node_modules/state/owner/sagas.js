import { select, call, put } from 'redux-saga/effects';

import { normalizeUrl } from "util/util";
import { errorThrown } from "state/error/actions";
import { Naming } from "api/naming";
import { Node } from "api/node";
import { ownerSet, ownerVerified } from "state/owner/actions";

export function* ownerLoadSaga() {
    const {rootApi, rootPage} = yield select(state => ({
        rootApi: state.node.root.api,
        rootPage: state.node.root.page}));
    try {
        const data = yield call(Node.getWhoAmI);
        yield put(ownerSet(data.registeredName, data.registeredNameGeneration));
        if (data.registeredName == null) {
            return;
        }
        const ndata = yield call(Naming.getCurrent, data.registeredName, data.registeredNameGeneration);
        const prefix = ndata ? normalizeUrl(ndata.nodeUri) + "/" : null;
        const correct = prefix && rootPage.startsWith(prefix) && rootApi.startsWith(prefix);
        const latest = ndata && ndata.latest;
        yield put(ownerVerified(data.registeredName, data.registeredNameGeneration, latest, correct));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

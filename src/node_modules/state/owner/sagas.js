import { select, call, put } from 'redux-saga/effects';

import { normalizeUrl } from "util/util";
import { errorThrown } from "state/error/actions";
import { Naming } from "api/naming";
import { Node } from "api/node";
import { ownerSet, ownerVerified } from "state/owner/actions";

export function* ownerLoadSaga() {
    try {
        const data = yield call(Node.getWhoAmI);
        yield put(ownerSet(data.registeredName, data.registeredNameGeneration));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

export function* ownerVerifySaga() {
    const {rootApi, rootPage, name, generation} = yield select(state => ({
        rootApi: state.node.root.api,
        rootPage: state.node.root.page,
        name: state.owner.name,
        generation: state.owner.generation
    }));
    try {
        const data = yield call(Naming.getCurrent, name, generation);
        const prefix = data ? normalizeUrl(data.nodeUri) + "/" : null;
        const correct = !!(prefix && rootPage.startsWith(prefix) && rootApi.startsWith(prefix));
        const latest = !!(data && data.latest);
        yield put(ownerVerified(name, generation, latest, correct));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

import immutable from 'object-path-immutable';

import { TIMELINE_FUTURE_SLICE_SET, TIMELINE_PAST_SLICE_SET } from "state/timeline/actions";
import { POSTING_DELETE, POSTING_DELETED, POSTING_SET } from "state/postings/actions";
import { safeHtml, safePreviewHtml } from "util/html";

const initialState = {
};

function safeguard(posting) {
    return {
        ...posting,
        bodyPreviewHtml: safePreviewHtml(posting.bodyPreviewHtml),
        bodyHtml: safeHtml(posting.bodyHtml)
    }
}

export default (state = initialState, action) => {
    switch (action.type) {
        case TIMELINE_PAST_SLICE_SET:
        case TIMELINE_FUTURE_SLICE_SET:
            let istate = immutable(state);
            action.payload.postings.forEach(p => istate
                .set([p.id, "posting"], safeguard(p))
                .set([p.id, "deleting"], false));
            return istate.value();

        case POSTING_SET:
            const posting = action.payload.posting;
            return immutable(state)
                .set([posting.id, "posting"], safeguard(posting))
                .set([posting.id, "deleting"], false)
                .value();

        case POSTING_DELETE:
            return immutable(state).set([action.payload.id, "deleting"], true).value();

        case POSTING_DELETED:
            const id = action.payload.posting.id;
            return immutable(state).del([id]).value();

        default:
            return state;
    }
}

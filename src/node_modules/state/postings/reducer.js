import immutable from 'object-path-immutable';
import selectn from 'selectn';

import { TIMELINE_FUTURE_SLICE_SET, TIMELINE_PAST_SLICE_SET } from "state/timeline/actions";
import {
    POSTING_DELETE,
    POSTING_DELETED,
    POSTING_SET,
    POSTING_VERIFY,
    POSTING_VERIFY_FAILED
} from "state/postings/actions";
import { EVENT_HOME_REMOTE_POSTING_VERIFICATION_FAILED, EVENT_HOME_REMOTE_POSTING_VERIFIED } from "api/events/actions";
import { safeHtml, safePreviewHtml } from "util/html";

const initialState = {
};

function safeguard(posting) {
    return {
        ...posting,
        bodyPreview: safePreviewHtml(posting.bodyPreview),
        body: safeHtml(posting.body)
    }
}

export default (state = initialState, action) => {
    switch (action.type) {
        case TIMELINE_PAST_SLICE_SET:
        case TIMELINE_FUTURE_SLICE_SET:
            let istate = immutable(state);
            action.payload.postings.forEach(p => istate
                .set([p.id, "posting"], safeguard(p))
                .set([p.id, "deleting"], false)
                .set([p.id, "verificationStatus"], "none"));
            return istate.value();

        case POSTING_SET:
            const posting = action.payload.posting;
            return immutable(state)
                .set([posting.id, "posting"], safeguard(posting))
                .set([posting.id, "deleting"], false)
                .set([posting.id, "verificationStatus"], "none")
                .value();

        case POSTING_DELETE:
            return immutable(state).set([action.payload.id, "deleting"], true).value();

        case POSTING_DELETED:
            return immutable(state).del([action.payload.id]).value();

        case POSTING_VERIFY:
            return immutable(state).set([action.payload.id, "verificationStatus"], "running").value();

        case POSTING_VERIFY_FAILED:
            return immutable(state).set([action.payload.id, "verificationStatus"], "none").value();

        case EVENT_HOME_REMOTE_POSTING_VERIFIED: {
            const posting = selectn([action.payload.postingId, "posting"], state);
            if (posting && posting.receiverName === action.payload.receiverName
                && (!action.payload.revisionId || posting.revisionId === action.payload.revisionId)) {

                const status = action.payload.correct ? "correct" : "incorrect";
                return immutable(state).set([action.payload.postingId, "verificationStatus"], status).value();
            }
            return state;
        }

        case EVENT_HOME_REMOTE_POSTING_VERIFICATION_FAILED: {
            const posting = selectn([action.payload.postingId, "posting"], state);
            if (posting && posting.receiverName === action.payload.receiverName
                && (!action.payload.revisionId && posting.revisionId === action.payload.revisionId)) {

                return immutable(state).set([action.payload.postingId, "verificationStatus"], "none").value();
            }
            return state;
        }

        default:
            return state;
    }
}

import { GO_TO_LOCATION, INIT_FROM_LOCATION, UPDATE_LOCATION } from "state/navigation/actions";
import { ERROR_THROWN } from "state/error/actions";
import { OWNER_LOAD, OWNER_VERIFY } from "state/owner/actions";
import { CONNECT_TO_HOME, HOME_OWNER_VERIFY } from "state/home/actions";
import { REGISTER_NAME, REGISTERED_NAME_LOAD, REGISTERED_NAME_UPDATE } from "state/registeredname/actions";
import { PROFILE_LOAD, PROFILE_UPDATE } from "state/profile/actions";
import { TIMELINE_SLICE_LOAD } from "state/timeline/actions";

import { applyMiddleware, combineReducers, createStore } from 'redux';
import error from "state/error/reducer";
import naming from "state/naming/reducer";
import node from "state/node/reducer";
import home from "state/home/reducer";
import tokens from "state/tokens/reducer";
import navigation from "state/navigation/reducer";
import connectDialog from "state/connectdialog/reducer";
import owner from "state/owner/reducer";
import registeredName from "state/registeredname/reducer";
import profile from "state/profile/reducer";
import timeline from "state/timeline/reducer";
import messageBox from "state/messagebox/reducer";

import createSagaMiddleware from 'redux-saga';
import { spawn, takeEvery, takeLatest, takeLeading } from 'redux-saga/effects';
import { pulseSaga } from "state/pulse/sagas";
import { goToLocationSaga, initFromLocationSaga, updateLocationSaga } from "state/navigation/sagas";
import { errorSaga } from "state/error/sagas";
import { ownerLoadSaga, ownerVerifySaga } from "state/owner/sagas";
import { connectToHomeSaga, verifyHomeOwnerSaga } from "state/home/connect";
import { registeredNameLoadSaga, registeredNameUpdateSaga, registerNameSaga } from "state/registeredname/sagas";
import { profileLoadSaga, profileUpdateSaga } from "state/profile/sagas";
import { timelineSliceLoadSaga } from "state/timeline/sagas";

import { collectTriggers, invokeTriggers } from "state/trigger";
import homeTriggers from "state/home/triggers";
import navigationTriggers from "state/navigation/triggers";
import ownerTriggers from "state/owner/triggers";
import registeredNameTriggers from "state/registeredname/triggers";
import profileTriggers from "state/profile/triggers";
import timelineTriggers from "state/timeline/triggers";

const triggers = collectTriggers(
    homeTriggers,
    navigationTriggers,
    ownerTriggers,
    registeredNameTriggers,
    profileTriggers,
    timelineTriggers
);

function* combinedSaga() {
    yield spawn(pulseSaga);
    yield takeLatest(INIT_FROM_LOCATION, initFromLocationSaga);
    yield takeEvery(UPDATE_LOCATION, updateLocationSaga);
    yield takeLatest(GO_TO_LOCATION, goToLocationSaga);
    yield takeLatest(ERROR_THROWN, errorSaga);
    yield takeLatest(OWNER_LOAD, ownerLoadSaga);
    yield takeLatest(OWNER_VERIFY, ownerVerifySaga);
    yield takeLatest(CONNECT_TO_HOME, connectToHomeSaga);
    yield takeLatest(HOME_OWNER_VERIFY, verifyHomeOwnerSaga);
    yield takeLatest(REGISTERED_NAME_LOAD, registeredNameLoadSaga);
    yield takeLatest(PROFILE_LOAD, profileLoadSaga);
    yield takeLatest(PROFILE_UPDATE, profileUpdateSaga);
    yield takeLatest(REGISTER_NAME, registerNameSaga);
    yield takeLatest(REGISTERED_NAME_UPDATE, registeredNameUpdateSaga);
    yield takeLeading(TIMELINE_SLICE_LOAD, timelineSliceLoadSaga);

    yield invokeTriggers(triggers);
}

const sagaMiddleware = createSagaMiddleware();
export default createStore(
    combineReducers({
        error,
        naming,
        node,
        home,
        tokens,
        navigation,
        connectDialog,
        owner,
        registeredName,
        profile,
        timeline,
        messageBox
    }),
    applyMiddleware(sagaMiddleware)
);

sagaMiddleware.run(combinedSaga);

import { call, put } from 'redux-saga/effects';

import { errorThrown } from "state/error/actions";
import {
    registeredNameLoadFailed,
    registeredNameSet,
    registerNameFailed,
    registerNameSucceeded
} from "state/registeredname/actions";
import { Naming, Node } from "api";

export function* registeredNameLoadSaga() {
    try {
        const data = yield call(Node.getRegisteredName);
        yield put(registeredNameSet(data));
    } catch (e) {
        yield put(registeredNameLoadFailed());
        yield put(errorThrown(e));
    }
}

export function* registerNameSaga(action) {
    const {name, formik} = action.payload;
    try {
        const free = yield call(Naming.isFree, name);
        if (!free) {
            formik.setFieldError("name", "Name is already taken");
            yield put(registerNameFailed());
            return;
        }
        const secret = yield call(Node.registerName, name);
        yield put(registerNameSucceeded(secret.mnemonic));
    } catch (e) {
        yield put(registerNameFailed());
        yield put(errorThrown(e));
    }
}

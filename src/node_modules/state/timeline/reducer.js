import { TIMELINE_PAST_SLICE_LOAD, TIMELINE_SLICE_LOAD_FAILED, TIMELINE_SLICE_SET } from "state/timeline/actions";
import { MAX_LONG } from "util/util";

const initialState = {
    loaded: false,
    loadingPast: false,
    before: MAX_LONG,
    after: MAX_LONG,
    postings: []
};

export default (state = initialState, action) => {
    switch (action.type) {
        case TIMELINE_PAST_SLICE_LOAD:
            return {
                ...state,
                loadingPast: true
            };

        case TIMELINE_SLICE_LOAD_FAILED:
            return {
                ...state,
                loadingPast: false
            };

        case TIMELINE_SLICE_SET:
            if (action.payload.before >= state.before && action.payload.after < state.after) {
                let postings = state.postings.slice();
                action.payload.postings
                    .filter(p => p.moment < state.after)
                    .forEach(p => postings.push(p));
                postings.sort((a, b) => b.moment - a.moment);
                return {
                    ...state,
                    loaded: true,
                    loadingPast: false,
                    after: action.payload.after,
                    postings
                };
            } else {
                return state;
            }

        default:
            return state;
    }
}

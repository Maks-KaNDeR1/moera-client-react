import React from 'react';
import { connect } from 'react-redux';
import { Client } from '@stomp/stompjs';

class Events extends React.Component {

    constructor(props) {
        super(props);

        this.stomp = null;
        this.location = null;
        this.queueStartedAt = null;
        this.lastEvent = null;
        this.buffer = [];

        this.onConnect = this.onConnect.bind(this);
        this.onMessage = this.onMessage.bind(this);
    }

    componentDidMount() {
        this._connect();
    }

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (prevProps.homeEvents !== this.props.homeEvents) {
            this._disconnect();
            this._connect();
        }
    }

    _connect() {
        const {homeEvents} = this.props;

        if (homeEvents == null) {
            return;
        }
        if (homeEvents !== this.location) {
            this.location = homeEvents;
            this.queueStartedAt = null;
            this.lastEvent = null;
        }

        this.stomp = new Client({
            brokerURL: homeEvents,
            onConnect: this.onConnect,
        });
        this.stomp.activate();
    }

    _disconnect() {
        if (this.stomp != null) {
            this.stomp.deactivate();
            this.stomp = null;
        }
    }

    onConnect() {
        let headers = {};
        if (this.queueStartedAt != null) {
            headers.seen = `${this.queueStartedAt},${this.lastEvent}`;
        }
        this.queueStartedAt = 0;
        this.lastEvent = 0;
        this.buffer = [];
        this.stomp.subscribe("/user/queue", this.onMessage, headers);
    }

    onMessage(message) {
        const json = JSON.parse(message.body);
        this.buffer.push(json);
        this.buffer.sort((e1, e2) => e2.ordinal - e1.ordinal);
        while (this.buffer.length > 0
                && (this.lastEvent === 0 || this.buffer.length > 5 || this.buffer[0].ordinal <= this.lastEvent + 1)) {
            console.log("Event:", this.buffer[0]);
            this.queueStartedAt = this.buffer[0].queueStartedAt;
            this.lastEvent = this.buffer[0].ordinal;
            this.buffer.shift();
        }
    }

    render() {
        return null;
    }

}

export default connect(
    state => ({
        homeEvents: state.home.root.events
    })
)(Events);

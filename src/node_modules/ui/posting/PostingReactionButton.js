import React from 'react';
import * as ReactDOM from 'react-dom';
import { connect } from 'react-redux';
import { Manager, Popper, Reference } from 'react-popper';
import cx from 'classnames';

import { REACTION_EMOJIS } from "api";
import { postingReact, postingReactionDelete } from "state/postings/actions";
import PostingButton from "ui/posting/PostingButton";

const PostingReactionButtonMain = ({id, icon, caption, invisible, negative, emoji, buttonRef, onMouseEnter,
                                    onMouseLeave, postingReact, postingReactionDelete}) => {
    if (emoji == null) {
        return <PostingButton icon={["far", icon]} caption={caption} invisible={invisible} buttonRef={buttonRef}
                              onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}
                              onClick={e => postingReact(id, negative, negative ? 0x1f44e : 0x1f44d)}/>;
    } else {
        const re = !negative ? REACTION_EMOJIS.positive[emoji] : REACTION_EMOJIS.negative[emoji];
        return <PostingButton emoji={emoji} caption={re ? re.title : caption} color={re ? re.color : null}
                              buttonRef={buttonRef} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}
                              onClick={e => postingReactionDelete(id)}/>;
    }
};

class PostingReactionButton extends React.PureComponent {

    constructor(props) {
        super(props);

        this.state = {popup: false};
        this.locus = "out";
        this.timerId = null;

        this.documentClick = this.documentClick.bind(this);
        this.mainEnter = this.mainEnter.bind(this);
        this.mainLeave = this.mainLeave.bind(this);
        this.popupEnter = this.popupEnter.bind(this);
        this.popupLeave = this.popupLeave.bind(this);
        this.timeout = this.timeout.bind(this);
    }

    documentClick(event) {
        if (this.locus === "out") {
            this.hide();
        }
    }

    mainEnter() {
        this.setLocus("main");
    }

    mainLeave() {
        if (this.locus === "main") {
            this.setLocus("out");
        }
    }

    popupEnter() {
        this.setLocus("popup");
    }

    popupLeave() {
        if (this.locus === "popup") {
            this.setLocus("out");
        }
    }

    setLocus(locus) {
        const changed = this.locus !== locus;
        this.locus = locus;
        if (changed) {
            if (this.timerId != null) {
                clearTimeout(this.timerId);
            }
            this.timerId = setTimeout(this.timeout, 1000);
        }
    }

    timeout() {
        this.timerId = null;
        switch (this.locus) {
            case "out":
                this.hide();
                break;
            case "main":
                this.show();
                break;
            default:
                // do nothing
        }
    }

    show() {
        this.setState({popup: true});
        document.addEventListener("click", this.documentClick);
    }

    hide() {
        this.setState({popup: false});
        document.removeEventListener("click", this.documentClick);
    }

    render() {
        const pointerEvents = {pointerEvents: this.state.popup ? "auto" : "none"};
        return (
            <Manager>
                <Reference>
                    {({ref}) =>
                        <PostingReactionButtonMain {...this.props} onMouseEnter={this.mainEnter}
                                                   onMouseLeave={this.mainLeave} buttonRef={ref}/>
                    }
                </Reference>
                {ReactDOM.createPortal(
                    <Popper placement="top" positionFixed={true}>
                        {({ref, style, placement, arrowProps}) => (
                            <div ref={ref} style={{...style, ...pointerEvents}} className={cx(
                                "popover",
                                `bs-popover-${placement}`,
                                "fade",
                                {"show": this.state.popup}
                            )}>
                                <div ref={arrowProps.ref} style={arrowProps.style} className="arrow"/>
                                <div className="popover-body" onMouseEnter={this.popupEnter}
                                     onMouseLeave={this.popupLeave}>
                                    Reactions will be here
                                </div>
                            </div>
                        )}
                    </Popper>,
                    document.querySelector("#modal-root")
                )}
            </Manager>
        );
    }

}

export default connect(
    null,
    { postingReact, postingReactionDelete }
)(PostingReactionButton);

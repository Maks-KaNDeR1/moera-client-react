import React from 'react';
import * as ReactDOM from 'react-dom';
import { connect } from 'react-redux';
import { Manager, Popper, Reference } from 'react-popper';
import cx from 'classnames';

import { REACTION_EMOJIS } from "api";
import { postingReact, postingReactionDelete } from "state/postings/actions";
import PostingButton from "ui/posting/PostingButton";
import ReactionSelector from "ui/posting/ReactionSelector";
import { getSetting } from "state/settings/selectors";
import { MAIN_NEGATIVE_REACTIONS, MAIN_POSITIVE_REACTIONS } from "api/node/reaction-emojis";

const PostingReactionButtonMain = ({id, icon, caption, invisible, negative, emoji, defaultEmoji, buttonRef,
                                    onMouseEnter, onMouseLeave, postingReact, postingReactionDelete}) => {
    if (emoji == null) {
        return <PostingButton icon={["far", icon]} caption={caption} invisible={invisible} buttonRef={buttonRef}
                              onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}
                              onClick={e => postingReact(id, negative, defaultEmoji)}/>;
    } else {
        const re = !negative ? REACTION_EMOJIS.positive[emoji] : REACTION_EMOJIS.negative[emoji];
        return <PostingButton emoji={emoji} caption={re ? re.title : caption} color={re ? re.color : null}
                              buttonRef={buttonRef} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}
                              onClick={e => postingReactionDelete(id)}/>;
    }
};

class PostingReactionButton extends React.PureComponent {

    constructor(props) {
        super(props);

        this.state = {locus: "out", popup: false};
        this.timerId = null;
        this.state = {reactions: this.initReactions()};

        this.documentClick = this.documentClick.bind(this);
        this.mainEnter = this.mainEnter.bind(this);
        this.mainLeave = this.mainLeave.bind(this);
        this.popupEnter = this.popupEnter.bind(this);
        this.popupLeave = this.popupLeave.bind(this);
        this.timeout = this.timeout.bind(this);
    }

    initReactions() {
        const {negative, positiveAvailable, negativeAvailable} = this.props;

        const availableList = (!negative ? positiveAvailable : negativeAvailable).split(",");
        const available = new Set(availableList.map(v => parseInt(v)));
        const reactions = (!negative ? MAIN_POSITIVE_REACTIONS : MAIN_NEGATIVE_REACTIONS)
            .concat(availableList.filter(r => r.startsWith("+")).map(v => parseInt(v)));
        return reactions.map(r => ({emoji: r, invisible: !available.has(r)}));
    }

    isInvisible() {
        return this.props.invisible || this.state.reactions.every(r => r.invisible);
    }

    getDefaultEmoji() {
        const {negative} = this.props;
        const {reactions} = this.state;

        const thumbsEmoji = negative ? 0x1f44e : 0x1f44d;
        const thumbs = reactions.find(r => r.emoji === thumbsEmoji);
        if (thumbs && !thumbs.invisible) {
            return thumbsEmoji;
        }
        const first = reactions.find(r => !r.invisible);
        return first ? first.emoji : null;
    }

    documentClick(event) {
        this.hide();
    }

    mainEnter() {
        this.setLocus("main");
    }

    mainLeave() {
        if (this.state.locus === "main") {
            this.setLocus("out");
        }
    }

    popupEnter() {
        this.setLocus("popup");
    }

    popupLeave() {
        if (this.state.locus === "popup") {
            this.setLocus("out");
        }
    }

    setLocus(locus) {
        const changed = this.state.locus !== locus;
        this.setState({locus});
        if (changed) {
            if (this.timerId != null) {
                clearTimeout(this.timerId);
            }
            this.timerId = setTimeout(this.timeout, 1000);
        }
    }

    timeout() {
        this.timerId = null;
        switch (this.state.locus) {
            case "out":
                this.hide();
                break;
            case "main":
                this.show();
                break;
            default:
                // do nothing
        }
    }

    show() {
        this.setState({popup: true});
        document.addEventListener("click", this.documentClick);
    }

    hide() {
        this.setState({popup: false});
        document.removeEventListener("click", this.documentClick);
    }

    render() {
        const {id, negative} = this.props;
        return (
            <Manager>
                <Reference>
                    {({ref}) =>
                        <PostingReactionButtonMain {...this.props}
                                                   invisible={this.isInvisible()}
                                                   defaultEmoji={this.getDefaultEmoji()}
                                                   onMouseEnter={this.mainEnter}
                                                   onMouseLeave={this.mainLeave}
                                                   buttonRef={ref}/>
                    }
                </Reference>
                {ReactDOM.createPortal(
                    (this.state.popup || this.state.locus !== "out") &&
                        <Popper placement="top">
                            {({ref, style, placement}) => (
                                <div ref={ref} style={style} className={cx(
                                    "popover",
                                    `bs-popover-${placement}`,
                                    "shadow",
                                    "fade",
                                    {"show": this.state.popup}
                                )}>
                                    <div className="popover-body" onMouseEnter={this.popupEnter}
                                         onMouseLeave={this.popupLeave}>
                                        <ReactionSelector id={id} negative={negative} reactions={this.state.reactions}/>
                                    </div>
                                </div>
                            )}
                        </Popper>,
                    document.querySelector("#modal-root")
                )}
            </Manager>
        );
    }

}

export default connect(
    state => ({
        positiveAvailable: getSetting(state, "reactions.positive.available"),
        negativeAvailable: getSetting(state, "reactions.negative.available")
    }),
    { postingReact, postingReactionDelete }
)(PostingReactionButton);

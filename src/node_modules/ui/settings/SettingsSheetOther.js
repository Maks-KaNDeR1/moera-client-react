import React from 'react';
import { connect } from 'react-redux';
import { Form, withFormik } from 'formik';

import { Button, InputField } from "ui/control";

function toFieldName(name) {
    return name.replace(/\./g, "_");
}

class SettingsSheetOther extends React.PureComponent {

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.props.nodeValues.length > 0 && prevProps.nodeValues.length === 0) {
            this.props.resetForm();
        }
    }

    render() {
        const {nodeValues} = this.props;

        return (
            <Form>
                {nodeValues.map(({name, value}) => <InputField key={name} name={toFieldName(name)} title={name} />)}
                <div className="settings-buttons">
                    <Button variant="secondary" type="reset" className="col-2">Cancel</Button>
                    <Button variant="primary" type="submit"  className="col-2">Save</Button>
                </div>
            </Form>
        );
    }

}

const settingsSheetOtherLogic = {

    mapPropsToValues(props) {
        let values = {};
        props.nodeValues.forEach(v => values[toFieldName(v.name)] = v.value || "");
        return values;
    },

    /*validationSchema: yup.object().shape({
        body: yup.string().trim().required("Must not be empty")
    }),*/

    handleSubmit(values, formik) {
        /*formik.props.composePost(
            formik.props.postingId, {
                bodySrc: values.body.trim(),
                bodySrcFormat: values.bodyFormat.trim(),
                publishAt: values.publishAtCustomized ? moment(values.publishAt).unix() : null
            }
        );*/
        formik.setSubmitting(false);
    }

};

export default connect(
    state => ({
        nodeValues: state.settings.node.values
    })
)(withFormik(settingsSheetOtherLogic)(SettingsSheetOther));

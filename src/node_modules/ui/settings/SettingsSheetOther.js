import React from 'react';
import { connect } from 'react-redux';
import { Form, withFormik } from 'formik';

import SettingsField from "ui/settings/SettingsField";
import SettingsButtons from "ui/settings/SettingsButtons";
import * as SettingTypes from "ui/settings/setting-types";
import { messageBox } from "state/messagebox/actions";
import { settingsUpdate } from "state/settings/actions";

function toFieldName(name) {
    return name.replace(/\./g, "_");
}

class SettingsSheetOther extends React.PureComponent {

    componentDidUpdate(prevProps, prevState, snapshot) {
        if ((this.props.nodeValues.size > 0 && prevProps.nodeValues.size === 0)
            || (this.props.nodeMeta.size > 0 && prevProps.nodeMeta.size === 0)) {

            this.props.resetForm();
        }
    }

    render() {
        const {nodeValues, nodeMeta} = this.props;

        return (
            <Form>
                {[...nodeValues.keys()].sort().map(name =>
                    <SettingsField key={name} name={name} fieldName={toFieldName(name)} meta={nodeMeta.get(name)}
                                   initialValue={nodeValues.get(name)}/>
                )}
                <SettingsButtons />
            </Form>
        );
    }

}

const settingsSheetOtherLogic = {

    mapPropsToValues(props) {
        const {nodeValues, nodeMeta} = props;

        if (nodeValues.size === 0 || nodeMeta.size === 0) {
            return {};
        }

        let values = {};
        nodeValues.forEach((value, name) => {
            const meta = nodeMeta.get(name);
            const type = meta ? meta.type : "string";
            values[toFieldName(name)] = SettingTypes.toValue(type, value);
        });
        return values;
    },

    handleSubmit(values, formik) {
        const {nodeValues, nodeMeta, messageBox, settingsUpdate} = formik.props;

        if (nodeValues.size === 0 || nodeMeta.size === 0) {
            formik.setSubmitting(false);
            return;
        }

        let hasErrors = false;
        let settingsToUpdate = [];
        nodeMeta.forEach((meta, name) => {
            if (!meta) {
                return;
            }
            const fieldName = toFieldName(name);
            let value = values[fieldName];
            const valid = SettingTypes.validate(value, meta.type, meta.modifiers);
            if (valid !== true) {
                formik.setFieldError(fieldName, valid);
                hasErrors = true;
            } else {
                formik.setFieldError(fieldName, null);
                value = value.toString();
                if (nodeValues.get(name) !== value) {
                    settingsToUpdate.push({name, value});
                }
            }
        });

        if (hasErrors) {
            messageBox("Some settings have incorrect values.");
        } else {
            settingsUpdate(settingsToUpdate, () => formik.resetForm());
        }

        formik.setSubmitting(false);
    }

};

export default connect(
    state => ({
        nodeValues: state.settings.node.values,
        nodeMeta: state.settings.node.meta
    }),
    { messageBox, settingsUpdate }
)(withFormik(settingsSheetOtherLogic)(SettingsSheetOther));

import React from 'react';
import { connect } from 'react-redux';
import { Form, withFormik } from 'formik';

import { Button } from "ui/control";
import SettingsField from "ui/settings/SettingsField";
import { parseBool } from "util/util";

function toFieldName(name) {
    return name.replace(/\./g, "_");
}

class SettingsSheetOther extends React.PureComponent {

    componentDidUpdate(prevProps, prevState, snapshot) {
        if ((this.props.nodeValues.size > 0 && prevProps.nodeValues.size === 0)
            || (this.props.nodeMeta.size > 0 && prevProps.nodeMeta.size === 0)) {

            this.props.resetForm();
        }
    }

    render() {
        const {nodeValues, nodeMeta} = this.props;

        return (
            <Form>
                {[...nodeValues.keys()].sort().map(name =>
                    <SettingsField key={name} name={name} fieldName={toFieldName(name)} meta={nodeMeta.get(name)} />
                )}
                <div className="settings-buttons">
                    <Button variant="secondary" type="reset" className="col-2">Cancel</Button>
                    <Button variant="primary" type="submit"  className="col-2">Save</Button>
                </div>
            </Form>
        );
    }

}

const settingsSheetOtherLogic = {

    mapPropsToValues(props) {
        const {nodeValues, nodeMeta} = props;

        if (nodeValues.size === 0 || nodeMeta.size === 0) {
            return {};
        }

        let values = {};
        nodeValues.forEach((value, name) => {
            const meta = nodeMeta.get(name);
            const type = meta ? meta.type : "string";
            switch (type) {
                case "bool":
                    values[toFieldName(name)] = parseBool(value);
                    break;

                case "int":
                    values[toFieldName(name)] = parseInt(value) || 0;
                    break;

                default:
                    values[toFieldName(name)] = value || "";
                    break;
            }
        });
        return values;
    },

    /*validationSchema: yup.object().shape({
        body: yup.string().trim().required("Must not be empty")
    }),*/

    handleSubmit(values, formik) {
        /*formik.props.composePost(
            formik.props.postingId, {
                bodySrc: values.body.trim(),
                bodySrcFormat: values.bodyFormat.trim(),
                publishAt: values.publishAtCustomized ? moment(values.publishAt).unix() : null
            }
        );*/
        formik.setSubmitting(false);
    }

};

export default connect(
    state => ({
        nodeValues: state.settings.node.values,
        nodeMeta: state.settings.node.meta
    })
)(withFormik(settingsSheetOtherLogic)(SettingsSheetOther));

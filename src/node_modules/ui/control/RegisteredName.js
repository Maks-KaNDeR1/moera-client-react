import React from 'react';
import { connect } from 'react-redux';
import PropType from 'prop-types';
import cx from 'classnames';

import { RegisteredName as RegisteredNameParser } from "api";
import { urlWithParameters } from "util/util";
import { getNamingNameDetails } from "state/naming/selectors";
import "./RegisteredName.css";

const NameGeneration = ({generation, latest}) => (
    latest || <span className="generation">{generation}</span>
);

NameGeneration.propTypes = {
    generation: PropType.number,
    latest: PropType.bool
};

const RegisteredNameImpl = ({ name, verified = false, correct = false, linked = true,
                              nodePageRoot, getNameDetails }) => {
    if (!name) {
        return null;
    }

    const klass = cx(
        "registered-name", {
            "correct": verified && correct,
            "incorrect": verified && !correct
        }
    );
    const details = getNameDetails(name);
    let href = details.loaded ? details.nodeUri : urlWithParameters(nodePageRoot + "/gotoname", {name});
    if (!linked) {
        href = "";
    }
    const parts = RegisteredNameParser.parse(name);
    return href ?
        (
            <a className={klass} href={href}>
                {parts.name}
                <NameGeneration generation={parts.generation} latest={details.latest} />
            </a>
        )
        :
        (
            <span className={klass}>
                {parts.name}
                <NameGeneration generation={parts.generation} latest={details.latest} />
            </span>
        );
};

RegisteredNameImpl.propTypes = {
    name: PropType.string,
    verified: PropType.bool,
    correct: PropType.bool
};

export const RegisteredName = connect(
    state => ({
        nodePageRoot: state.node.root.page,
        getNameDetails: name => getNamingNameDetails(state, name)
    })
)(RegisteredNameImpl);

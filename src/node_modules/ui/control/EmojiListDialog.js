import React from 'react';
import PropType from 'prop-types';
import immutable from 'object-path-immutable';
import cx from 'classnames';

import {
    MAIN_NEGATIVE_REACTIONS,
    MAIN_NEGATIVE_REACTIONS_SET,
    MAIN_POSITIVE_REACTIONS,
    MAIN_POSITIVE_REACTIONS_SET,
    REACTION_EMOJIS
} from "api/node/reaction-emojis";
import { Button, ModalDialog, ReactionSelector } from "ui/control";
import EmojiList from "util/emoji-list";

export class EmojiListDialog extends React.PureComponent {

    static propTypes = {
        negative: PropType.bool,
        value: PropType.string,
        onConfirm: PropType.func,
        onCancel: PropType.func
    };

    constructor(props, context) {
        super(props, context);

        const list = new EmojiList(props.value);
        const choice = this.getAllEmojis()
            .reduce(
                (m, emoji) => {
                    m[emoji] = {dimmed: !list.includesExplicitly(emoji)};
                    return m;
                },
                {}
            );
        this.state = {choice, other: list.other()};

        this.onOtherClick = this.onOtherClick.bind(this);
        this.onClick = this.onClick.bind(this);
        this.onConfirm = this.onConfirm.bind(this);
    }

    getAllEmojis() {
        return Object.keys(!this.props.negative ? REACTION_EMOJIS.positive : REACTION_EMOJIS.negative)
            .map(emoji => parseInt(emoji));
    }

    getMainEmojis() {
        return !this.props.negative ? MAIN_POSITIVE_REACTIONS : MAIN_NEGATIVE_REACTIONS;
    }

    getOtherEmojis() {
        const mainReactionsSet = !this.props.negative ? MAIN_POSITIVE_REACTIONS_SET : MAIN_NEGATIVE_REACTIONS_SET;
        return this.getAllEmojis()
            .filter(emoji => !mainReactionsSet.has(emoji))
    }

    getMainReactions() {
        return this.getMainEmojis().map(emoji => ({emoji, dimmed: this.state.choice[emoji].dimmed}));
    }

    getAdditionalReactions() {
        return this.getOtherEmojis().map(emoji => ({emoji, dimmed: this.state.choice[emoji].dimmed}));
    }

    onOtherClick() {
        this.setState(state => ({...state, other: !state.other}));
    }

    onClick(negative, emoji) {
        this.setState(state => immutable.update(state, ["choice", emoji, "dimmed"], d => !d));
    }

    onConfirm() {
        const value = this.getAllEmojis()
            .filter(emoji => !this.state.choice[emoji].dimmed)
            .map(emoji => "+0x" + Number(emoji).toString(16));
        if (this.state.other) {
            value.push("*");
        }
        this.props.onConfirm(value.join(","));
    }

    render() {
        const {negative, onCancel} = this.props;

        const additionalReactions = this.getAdditionalReactions();
        return (
            <ModalDialog onClose={onCancel}>
                <div className="modal-body">
                    <div className="clearfix">
                        <div className="float-right">
                            <button type="button"
                                    className={cx(
                                        "btn",
                                        "btn-sm",
                                        {
                                            "btn-outline-primary": this.state.other,
                                            "btn-outline-secondary": !this.state.other
                                        }
                                    )}
                                    onClick={this.onOtherClick}>
                                {this.state.other ? "Selected are recommended" : "Only selected are allowed"}
                            </button>
                        </div>
                    </div>
                    {additionalReactions.length > 0 &&
                        <h5>Main</h5>
                    }
                    <ReactionSelector negative={negative} reactions={this.getMainReactions()} fixedWidth={true}
                                      onClick={this.onClick}/>
                    {additionalReactions.length > 0 &&
                        <>
                            <h5 className="mt-3">Additional</h5>
                            <ReactionSelector negative={negative} reactions={additionalReactions} fixedWidth={false}
                                              onClick={this.onClick}/>
                        </>
                    }
                </div>
                <div className="modal-footer">
                    <Button variant="secondary" onClick={onCancel}>Cancel</Button>
                    <Button variant="primary" onClick={this.onConfirm}>OK</Button>
                </div>
            </ModalDialog>
        );
    }

}

import React from 'react';
import PropType from 'prop-types';
import { NumberPicker } from 'react-widgets';
import { Field } from 'formik';
import selectn from 'selectn';

import { Column, FormGroup } from "ui/control";
import Duration from "util/duration";
import "./DurationField.css";

export class DurationField extends React.PureComponent {

    static propTypes = {
        name: PropType.string,
        title: PropType.string,
        horizontal: PropType.bool,
        groupClassName: PropType.string,
        labelClassName: PropType.string,
        col: PropType.string,
        autoFocus: PropType.bool,
        noFeedback: PropType.bool
    };

    constructor(props) {
        super(props);

        this.onChange = this.onChange.bind(this);
    }

    onChange(form, fieldName, newUnit, newAmount) {
        let duration = Duration.parse(form.values[fieldName]);
        if (newUnit != null) {
            duration.unit = newUnit;
        }
        if (newAmount != null) {
            duration.amount = newAmount;
        }
        form.setFieldValue(fieldName, duration.toString());
    }

    render() {
        const {name, title, horizontal = false, groupClassName, labelClassName, col, noFeedback = false,
               autoFocus} = this.props;

        return (
            <FormGroup title={title} name={name + "_amount"} horizontal={horizontal} labelClassName={labelClassName}
                       groupClassName={groupClassName}>
                {/* <label> is not functional, because NumberPicker doesn't allow to set id */}
                <Field name={name}>
                    {({field, form}) => {
                        const duration = Duration.parse(field.value);
                        const touched = selectn(field.name, form.touched);
                        const error = selectn(field.name, form.errors);
                        return (
                            <Column className={col}>
                                <div className="duration-control">
                                    <NumberPicker
                                        name={field.name + "_amount"}
                                        value={duration.amount}
                                        onChange={v => this.onChange(form, field.name, null, v)}
                                        autoFocus={autoFocus}
                                        min={0}
                                    />
                                    <select name={field.name + "_unit"} value={duration.unit}
                                            onChange={e => this.onChange(form, field.name, e.target.value, null)}>
                                        <option key="s" value="s">seconds</option>
                                        <option key="m" value="m">minutes</option>
                                        <option key="h" value="h">hours</option>
                                        <option key="d" value="d">days</option>
                                    </select>
                                </div>
                                {!noFeedback && touched && error && <div className="invalid-feedback">{error}</div>}
                            </Column>
                        );
                    }}
                </Field>
            </FormGroup>
        );
    }

}

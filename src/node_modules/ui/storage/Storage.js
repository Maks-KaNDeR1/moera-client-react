import React from 'react';
import { connect } from 'react-redux';
import deepEqual from 'deep-equal';

import { getHomePermissions, getHomeToken } from "state/home/selectors";
import { restoreConnectDialog } from "state/connectdialog/actions";
import { connectedToHome, disconnectFromHome } from "state/home/actions";
import { randomId } from "util/util";

class Storage extends React.Component {

    constructor(props) {
        super(props);

        this.clientId = randomId();
        this.initialized = false;
        this.messageReceived = this.messageReceived.bind(this);
    }

    componentDidMount() {
        window.addEventListener("message", this.messageReceived);
        try {
            // Call the browser extension to inject communication code
            fetch("https://moera.please.start.communication/");
        } catch (e) {
            // The request must fail
        }
    }

    messageReceived(event) {
        // Only accept messages from the same frame
        if (event.source !== window) {
            return;
        }

        const message = event.data;

        // Only accept messages that we know are ours
        if (message === null || typeof message !== "object" || !message.source || message.source !== "moera") {
            return;
        }

        switch (message.action) {
            case "loadedData":
                this.loadedData(message.payload);
                this.initialized = true;
                return;

            default:
                return;
        }
    }

    loadedData(data) {
        if (!data || data.clientId === this.clientId) {
            return;
        }

        const {location, login, token, permissions} = data.home;
        if (token) {
            this.props.restoreConnectDialog(location, login);
            this.props.connectedToHome(location, login, token, permissions);
        } else {
            this.props.disconnectFromHome(location, login);
        }
    }

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (!this.initialized || deepEqual(prevProps, this.props)) {
            return;
        }

        window.postMessage({
            source: "moera",
            action: "storeData",
            payload: {
                home: {...this.props.home},
                clientId: this.clientId
            }
        }, "*");
    }

    render() {
        return null;
    }

}

export default connect(
    state => ({
        home: {
            location: state.home.root.location || state.connectDialog.location,
            login: state.home.login || state.connectDialog.login,
            token: getHomeToken(state),
            permissions: getHomePermissions(state)
        },
    }),
    { restoreConnectDialog, connectedToHome, disconnectFromHome }
)(Storage);

import React from 'react';
import { connect } from 'react-redux';
import PropType from 'prop-types';

import { Button, Loading, RegisteredName } from "ui/control";
import {
    isRegisteredNameDefined,
    isRegisteredNameManageable,
    isRegisteredNameOperationPending
} from "state/registeredname/selectors";
import Expiration from "ui/profile/view/Expiration";
import OperationStatus from "ui/profile/view/OperationStatus";
import { registerNameDialog } from "state/registeredname/actions";
import RegisterNameDialog from "ui/profile/manage/RegisterNameDialog";
import MnemonicDialog from "ui/profile/manage/MnemonicDialog";

const ManagementButtonsImpl = ({nameDefined, operationPending, registerNameDialog}) => (
    <div className="col-sm-9">
        <Button variant="outline-secondary" size="sm" disabled={operationPending}>
            Change
        </Button>
        <Button variant={!nameDefined ? "primary" : "outline-secondary"} size="sm" disabled={operationPending}
                style={{marginLeft: "0.2rem"}} onClick={registerNameDialog}>
            Register New
        </Button>
        {nameDefined &&
            <Button variant="primary" size="sm" disabled={operationPending} style={{marginLeft: "0.2rem"}}>
                Prolong
            </Button>
        }
    </div>
);

const ManagementButtons = connect(
    state => ({
        nameDefined: isRegisteredNameDefined(state),
        operationPending: isRegisteredNameOperationPending(state)
    }),
    { registerNameDialog }
)(ManagementButtonsImpl);

const RegisteredNameView = ({loading, name, generation, manageable}) => (
    <>
        <h4>
            Registered Name <Loading active={loading} />
        </h4>
        <div className="row">
            {name &&
                <div className="col-sm-3">
                    <RegisteredName name={name} generation={generation}/>
                    {manageable && <Expiration />}
                </div>
            }
            {manageable && <ManagementButtons />}
        </div>
        {manageable && <OperationStatus />}
        <RegisterNameDialog />
        <MnemonicDialog />
    </>
);

RegisteredNameView.propTypes = {
    loading: PropType.bool,
    name: PropType.string,
    generation: PropType.number,
    manageable: PropType.bool
};

export default connect(
    state => ({
        loading: state.registeredName.loading,
        name: state.registeredName.name,
        generation: state.registeredName.generation,
        manageable: isRegisteredNameManageable(state)
    })
)(RegisteredNameView);

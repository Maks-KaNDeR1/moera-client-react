import React from 'react';
import { connect } from 'react-redux';
import { Button, CheckboxField, ModalDialog } from "ui/control";
import { Form, withFormik } from 'formik';

import { mnemonicClose } from "state/registeredname/actions";

const Column = ({mnemonic, start, end}) => (
    <div className="col-sm-3">
        {mnemonic.slice(start, end).map((value, index) => (
            <React.Fragment key={index}>{start + index + 1}. {value}<br /></React.Fragment>
        ))}
    </div>
);

class MnemonicDialog  extends React.Component {

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.props.mnemonic != null && prevProps.mnemonic == null) {
            this.props.resetForm();
        }
    }

    render() {
        const {mnemonic} = this.props;
        const {confirmed} = this.props.values;

        if (!mnemonic) {
            return null;
        }

        return (
            <ModalDialog title="Registered Name Secret">
                <Form>
                    <div className="modal-body">
                        <p>
                            Please write down or print these words and keep them in a safe place. You will need them for
                            any operations with your name. <b>If you loose these words, they cannot be recovered and
                            you will completely loose control of your registered name.</b>
                        </p>
                        <p className="row">
                            <Column mnemonic={mnemonic} start={0} end={8} />
                            <Column mnemonic={mnemonic} start={8} end={16} />
                            <Column mnemonic={mnemonic} start={16} end={24} />
                        </p>
                        <p>
                            <CheckboxField name="confirmed" title="I have written down all these words" />
                        </p>
                    </div>
                    <div className="modal-footer">
                        <Button variant="primary" type="submit" disabled={!confirmed}>Close</Button>
                    </div>
                </Form>
            </ModalDialog>
        );
    }

}

const mnemonicDialogLogic = {

    mapPropsToValues(props) {
        return {
            confirmed: false
        }
    },

    handleSubmit(values, formik) {
        formik.props.mnemonicClose();
        formik.setSubmitting(false);
    }

};

export default connect(
    state => ({
        mnemonic: state.registeredName.mnemonic,
    }),
    { mnemonicClose }
)(withFormik(mnemonicDialogLogic)(MnemonicDialog));

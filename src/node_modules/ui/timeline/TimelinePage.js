import React from 'react';
import { connect } from 'react-redux';

import { Page } from "ui/page/Page";
import { Loading } from "ui/control";
import TimelinePageHeader from "ui/timeline/TimelinePageHeader";
import TimelinePosting from "ui/timeline/TimelinePosting";
import { timelineFutureSliceLoad, timelinePastSliceLoad, timelineScrolled } from "state/timeline/actions";
import { isAtTimelinePage } from "state/navigation/selectors";
import "./TimelinePage.css";

class TimelinePage extends React.Component {

    constructor(props) {
        super(props);
        this.prevAt = Number.MAX_SAFE_INTEGER;

        this.onScroll = this.onScroll.bind(this);
        this.updateOnScroll();
        this.observeSentinelFuture = this.observeSentinelFuture.bind(this);
        this.loadFuture = this.loadFuture.bind(this);
        this.observerFuture = new IntersectionObserver(this.loadFuture, {rootMargin: "250px 0px 0px 0px"});
        this.observeSentinelPast = this.observeSentinelPast.bind(this);
        this.loadPast = this.loadPast.bind(this);
        this.observerPast = new IntersectionObserver(this.loadPast, {rootMargin: "0px 0px 250px 0px"});
    }

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.props.visible !== prevProps.visible) {
            this.updateOnScroll();
        }
        if (this.props.visible) {
            if (this.props.anchor !== prevProps.anchor) {
                this.scrollTo(this.props.anchor);
            }
            const topmost = TimelinePage.getTopmostMoment();
            if (topmost !== this.prevAt) {
                this.scrollTo(this.prevAt);
            }
        }
    }

    updateOnScroll() {
        window.onscroll = this.props.visible ? this.onScroll : null;
    }

    onScroll() {
        const at = TimelinePage.getTopmostMoment();
        if (at !== this.prevAt) {
            this.props.timelineScrolled(at);
        }
        this.prevAt = at;

    }

    static getHeaderHeight() {
        const mainMenu = document.getElementById("main-menu");
        const header = document.getElementById("timeline-header");
        return mainMenu != null && header != null
            ? mainMenu.getBoundingClientRect().height + header.getBoundingClientRect().height : 0;
    }

    static getTopmostMoment() {
        const top = TimelinePage.getHeaderHeight();
        const postings = document.getElementsByClassName("posting");
        for (let i = 0; i < postings.length; i++) {
            if (postings.item(i).getBoundingClientRect().top >= top) {
                return parseInt(postings.item(i).dataset.moment);
            }
        }
        return Number.MAX_SAFE_INTEGER;
    }

    static getPostingAt(moment) {
        const postings = document.getElementsByClassName("posting");
        for (let i = 0; i < postings.length; i++) {
            if (postings.item(i).dataset.moment <= moment) {
                return postings.item(i);
            }
        }
        return null;
    }

    scrollTo(moment) {
        const posting = TimelinePage.getPostingAt(moment);
        if (posting != null) {
            posting.scrollIntoView(true);
            const y = -TimelinePage.getHeaderHeight() - 10;
            window.scrollBy(0, y);
        }
        this.prevAt = moment;
    }

    observeSentinelFuture(sentinel) {
        if (sentinel == null) {
            this.observerFuture.disconnect();
        } else {
            this.observerFuture.observe(sentinel);
        }
    }

    loadFuture() {
        if (this.props.loadingFuture || this.props.before >= Number.MAX_SAFE_INTEGER) {
            return;
        }
        this.props.timelineFutureSliceLoad();
    }

    observeSentinelPast(sentinel) {
        if (sentinel == null) {
            this.observerPast.disconnect();
        } else {
            this.observerPast.observe(sentinel);
        }
    }

    loadPast() {
        if (this.props.loadingPast || this.props.after <= Number.MIN_SAFE_INTEGER) {
            return;
        }
        this.props.timelinePastSliceLoad();
    }

    render() {
        const {loadingFuture, loadingPast, timeline, postings, before, after} = this.props;

        if (postings.length === 0 && !loadingFuture && !loadingPast
            && before >= Number.MAX_SAFE_INTEGER && after <= Number.MIN_SAFE_INTEGER) {

            return (
                <Page>
                    <TimelinePageHeader empty />
                    <div className="no-postings">Nothing yet.</div>
                </Page>
            );
        }

        return (
            <Page>
                <TimelinePageHeader />
                <Loading active={loadingFuture} />
                <div ref={this.observeSentinelFuture} />
                {timeline
                    .map(t => postings[t.id].posting)
                    .map(posting => <TimelinePosting key={posting.moment} posting={posting} />)}
                <div ref={this.observeSentinelPast} />
                <Loading active={loadingPast} />
                {after <= Number.MIN_SAFE_INTEGER
                    && <div className="timeline-end">&mdash; That's all Folks! &mdash;</div>}
            </Page>
        );
    }
}

export default connect(
    state => ({
        visible: isAtTimelinePage(state),
        loadingFuture: state.timeline.loadingFuture,
        loadingPast: state.timeline.loadingPast,
        before: state.timeline.before,
        after: state.timeline.after,
        timeline: state.timeline.postings,
        postings: state.postings,
        anchor: state.timeline.anchor
    }),
    { timelineFutureSliceLoad, timelinePastSliceLoad, timelineScrolled }
)(TimelinePage);

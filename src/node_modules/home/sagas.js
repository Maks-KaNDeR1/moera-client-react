import { apply, call, put, select } from 'redux-saga/effects';

import { normalizeUrl } from "util/util";
import { HomeError } from "error";
import { errorThrown } from "error/actions";
import { connectedToHome, connectionToHomeFailed, homeOwnerSet, homeOwnerVerified } from "home/actions";
import { messageBox } from "messagebox/actions";
import { openConnectDialog } from "logobar/connectionstatus/connectdialog/actions";
import { getCurrentSaga } from "naming/sagas";

function* connectionToHomeFailedMessage(message, onClose = null) {
    yield put(messageBox("Connection to home failed: " + message, onClose));
}

export function* connectToHome(action) {
    const {location, login, password} = action.payload;
    const url = normalizeUrl(location) + "/moera/api/tokens";
    let response;
    try {
        response = yield call(fetch, url, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                login,
                password
            })
        });
    } catch (e) {
        yield put(connectionToHomeFailed());
        yield call(connectionToHomeFailedMessage, e.message);
        return;
    }
    const data = yield apply(response, response.json);
    if (!response.ok) {
        if (data && data.errorCode === "credentials.login-incorrect") {
            yield put(connectionToHomeFailed());
            yield call(connectionToHomeFailedMessage, "Login incorrect", openConnectDialog());
        } else {
            yield put(connectionToHomeFailed());
            yield call(connectionToHomeFailedMessage, response.statusText);
        }
        return;
    }
    yield put(connectedToHome(normalizeUrl(location), login, data.token));
    yield call(verifyHomeOwnerSaga);
}

function* callHome(location) {
    const rootApi = yield select(state => state.home.root.api);
    let response;
    try {
        response = yield call(fetch, rootApi + location);
    } catch (e) {
        throw new HomeError(e);
    }
    if (!response.ok) {
        throw new HomeError("Server returned error status");
    }
    return yield apply(response, response.json);
}

function* getWhoAmISaga() {
    return yield call(callHome, "/whoami");
}

function* verifyHomeOwnerSaga() {
    const rootLocation = yield select(state => state.node.root.location);
    try {
        const data = yield call(getWhoAmISaga);
        yield put(homeOwnerSet(data.registeredName, data.registeredNameGeneration));
        if (data.registeredName == null) {
            return;
        }
        const ndata = yield call(getCurrentSaga, data.registeredName, data.registeredNameGeneration);
        const correct = normalizeUrl(ndata.nodeUri) === rootLocation;
        yield put(homeOwnerVerified(data.registeredName, data.registeredNameGeneration, ndata.latest, correct));
    } catch (e) {
        yield put(errorThrown(e));
    }
}

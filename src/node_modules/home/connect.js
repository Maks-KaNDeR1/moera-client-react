import { apply, call, put, select } from 'redux-saga/effects';

import { messageBox } from "messagebox/actions";
import { normalizeUrl } from "util/util";
import { connectedToHome, connectionToHomeFailed, homeOwnerSet, homeOwnerVerified } from "home/actions";
import { openConnectDialog } from "logobar/connectionstatus/connectdialog/actions";
import * as Home from "home/sagas";
import * as Naming from "naming/sagas";
import { errorThrown } from "error/actions";

function* connectToHomeFailure(message, onClose = null) {
    yield put(connectionToHomeFailed());
    yield put(messageBox("Connection to home failed: " + message, onClose));
}

export function* connectToHomeSaga(action) {
    const {location, login, password} = action.payload;
    const url = normalizeUrl(location) + "/moera/api/tokens";
    let response;
    try {
        response = yield call(fetch, url, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                login,
                password
            })
        });
    } catch (e) {
        yield call(connectToHomeFailure, e.message);
        return;
    }
    const data = yield apply(response, response.json);
    if (!response.ok) {
        if (data && data.errorCode === "credentials.login-incorrect") {
            yield call(connectToHomeFailure, "Login incorrect", openConnectDialog());
        } else {
            yield call(connectToHomeFailure, response.statusText);
        }
        return;
    }
    yield put(connectedToHome(normalizeUrl(location), login, data.token, data.permissions));
    yield call(verifyHomeOwnerSaga);
}

export function* verifyHomeOwnerSaga() {
    const rootLocation = yield select(state => state.node.root.location);
    try {
        const data = yield call(Home.getWhoAmI);
        yield put(homeOwnerSet(data.registeredName, data.registeredNameGeneration));
        if (data.registeredName == null) {
            return;
        }
        const ndata = yield call(Naming.getCurrent, data.registeredName, data.registeredNameGeneration);
        const correct = normalizeUrl(ndata.nodeUri) === rootLocation;
        yield put(homeOwnerVerified(data.registeredName, data.registeredNameGeneration, ndata.latest, correct));
    } catch (e) {
        yield put(errorThrown(e));
    }
}
